class Solution(object):
    def canFinish(self, N, prerequisites):
        graph = collections.defaultdict(list)
        visited = [0]*N
        for x, y in prerequisites:
            graph[x].append(y)
            
        for i in range(N):
            if not self.dfs(graph,visited,i):
                return False
        return True
    
    def dfs(self,graph,visited,i):
        if visited[i] == 1: return False
        if visited[i] == 2: return True
        visited[i] = 1
        for j in graph[i]:
            if not self.dfs(graph,visited,j):
                return False
        visited[i] = 2
        return True